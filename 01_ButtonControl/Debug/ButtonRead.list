
ButtonRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e18  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001f54  08001f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f70  08001f70  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f78  08001f78  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f78  08001f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f7c  08001f7c  00011f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08001f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000038  08001fb8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001fb8  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000677d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001657  00000000  00000000  00026821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00027e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000632  00000000  00000000  000286c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014c08  00000000  00000000  00028cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a04c  00000000  00000000  0003d8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082bbe  00000000  00000000  00047946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002134  00000000  00000000  000ca504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000cc638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000038 	.word	0x20000038
 8000158:	00000000 	.word	0x00000000
 800015c:	08001f3c 	.word	0x08001f3c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000003c 	.word	0x2000003c
 8000178:	08001f3c 	.word	0x08001f3c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <ButtonHardwareInit>:
/**
  * @brief  Button control Hardware Init Function
  * @retval
  */
void ButtonHardwareInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <ButtonHardwareInit+0x4c>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <ButtonHardwareInit+0x4c>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	61d3      	str	r3, [r2, #28]
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <ButtonHardwareInit+0x4c>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pins : PAPin PAPin PAPin */
	  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80004a8:	2307      	movs	r3, #7
 80004aa:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <ButtonHardwareInit+0x50>)
 80004ba:	f000 fbed 	bl	8000c98 <HAL_GPIO_Init>

}
 80004be:	bf00      	nop
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40020000 	.word	0x40020000

080004d0 <ButtonInitTask>:
  * @brief  Button control Init Function
  * It set the variables to Init value
  * @retval
  */
void ButtonInitTask(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	ButtonHardwareInit();
 80004d4:	f7ff ffd2 	bl	800047c <ButtonHardwareInit>

	pre_BC_Debounce_Set_Val = BC_DEBOUCE_TRSH;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <ButtonInitTask+0x50>)
 80004da:	2232      	movs	r2, #50	; 0x32
 80004dc:	601a      	str	r2, [r3, #0]

	BC_Debounce_Set_Val = BC_DEBOUCE_TRSH;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <ButtonInitTask+0x54>)
 80004e0:	2232      	movs	r2, #50	; 0x32
 80004e2:	601a      	str	r2, [r3, #0]
	st_button1.u32_CNT  = 0;
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <ButtonInitTask+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
	st_button1.u32_TRSH = BC_DEBOUCE_TRSH;
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <ButtonInitTask+0x58>)
 80004ec:	2232      	movs	r2, #50	; 0x32
 80004ee:	605a      	str	r2, [r3, #4]
	st_button1.u8_FLAG  = 0;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <ButtonInitTask+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	721a      	strb	r2, [r3, #8]

	st_button2.u32_CNT  = 0;
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <ButtonInitTask+0x5c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
	st_button2.u32_TRSH = BC_DEBOUCE_TRSH;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <ButtonInitTask+0x5c>)
 80004fe:	2232      	movs	r2, #50	; 0x32
 8000500:	605a      	str	r2, [r3, #4]
	st_button2.u8_FLAG  = 0;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <ButtonInitTask+0x5c>)
 8000504:	2200      	movs	r2, #0
 8000506:	721a      	strb	r2, [r3, #8]

	st_button3.u32_CNT  = 0;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <ButtonInitTask+0x60>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	st_button3.u32_TRSH = BC_DEBOUCE_TRSH;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <ButtonInitTask+0x60>)
 8000510:	2232      	movs	r2, #50	; 0x32
 8000512:	605a      	str	r2, [r3, #4]
	st_button3.u8_FLAG  = 0;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <ButtonInitTask+0x60>)
 8000516:	2200      	movs	r2, #0
 8000518:	721a      	strb	r2, [r3, #8]

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000004 	.word	0x20000004
 8000524:	20000000 	.word	0x20000000
 8000528:	20000008 	.word	0x20000008
 800052c:	20000014 	.word	0x20000014
 8000530:	20000020 	.word	0x20000020

08000534 <readButton>:


void readButton( ButtonTypeDef *Button ,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	4613      	mov	r3, r2
 8000540:	80fb      	strh	r3, [r7, #6]

    if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	691a      	ldr	r2, [r3, #16]
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	4013      	ands	r3, r2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00f      	beq.n	800056e <readButton+0x3a>
	{
		if(Button->u32_CNT < Button->u32_TRSH)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	429a      	cmp	r2, r3
 8000558:	d205      	bcs.n	8000566 <readButton+0x32>
		  { Button->u32_CNT++; }
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	601a      	str	r2, [r3, #0]
	{
		Button->u32_CNT = 0;
		Button->u8_FLAG = 0;
	}

}
 8000564:	e009      	b.n	800057a <readButton+0x46>
		  { Button->u8_FLAG = 1; }
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2201      	movs	r2, #1
 800056a:	721a      	strb	r2, [r3, #8]
}
 800056c:	e005      	b.n	800057a <readButton+0x46>
		Button->u32_CNT = 0;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
		Button->u8_FLAG = 0;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	721a      	strb	r2, [r3, #8]
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <SetDebounce>:

void SetDebounce(uint32_t treshold)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	st_button1.u32_TRSH = treshold;
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <SetDebounce+0x24>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6053      	str	r3, [r2, #4]
	st_button2.u32_TRSH = treshold;
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <SetDebounce+0x28>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6053      	str	r3, [r2, #4]
	st_button3.u32_TRSH = treshold;
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <SetDebounce+0x2c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6053      	str	r3, [r2, #4]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000014 	.word	0x20000014
 80005b0:	20000020 	.word	0x20000020

080005b4 <ButtonMainTask>:
/**
  * @brief  Button control Task
  * @retval
  */
void ButtonMainTask(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	switch (en_ButtonCtrlState) {
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <ButtonMainTask+0xe0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d85d      	bhi.n	800067c <ButtonMainTask+0xc8>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <ButtonMainTask+0x14>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	08000685 	.word	0x08000685
 80005d0:	08000649 	.word	0x08000649
 80005d4:	08000617 	.word	0x08000617
	  case InitState:

			st_button1.u32_CNT  = 0;
 80005d8:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <ButtonMainTask+0xe4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
			st_button1.u32_TRSH = BC_DEBOUCE_TRSH;
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <ButtonMainTask+0xe4>)
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	605a      	str	r2, [r3, #4]
			st_button1.u8_FLAG  = 0;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <ButtonMainTask+0xe4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	721a      	strb	r2, [r3, #8]

			st_button2.u32_CNT  = 0;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <ButtonMainTask+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
			st_button2.u32_TRSH = BC_DEBOUCE_TRSH;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <ButtonMainTask+0xe8>)
 80005f2:	2232      	movs	r2, #50	; 0x32
 80005f4:	605a      	str	r2, [r3, #4]
			st_button2.u8_FLAG  = 0;
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <ButtonMainTask+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	721a      	strb	r2, [r3, #8]

			st_button3.u32_CNT  = 0;
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <ButtonMainTask+0xec>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
			st_button3.u32_TRSH = BC_DEBOUCE_TRSH;
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <ButtonMainTask+0xec>)
 8000604:	2232      	movs	r2, #50	; 0x32
 8000606:	605a      	str	r2, [r3, #4]
			st_button3.u8_FLAG  = 0;
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <ButtonMainTask+0xec>)
 800060a:	2200      	movs	r2, #0
 800060c:	721a      	strb	r2, [r3, #8]

			en_ButtonCtrlState = RoutineState;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <ButtonMainTask+0xe0>)
 8000610:	2203      	movs	r2, #3
 8000612:	701a      	strb	r2, [r3, #0]

		  break;
 8000614:	e03b      	b.n	800068e <ButtonMainTask+0xda>

	  case RoutineState:

		  readButton(&st_button1,Button1_GPIO_Port,Button1_Pin);
 8000616:	2201      	movs	r2, #1
 8000618:	4922      	ldr	r1, [pc, #136]	; (80006a4 <ButtonMainTask+0xf0>)
 800061a:	481f      	ldr	r0, [pc, #124]	; (8000698 <ButtonMainTask+0xe4>)
 800061c:	f7ff ff8a 	bl	8000534 <readButton>
		  readButton(&st_button2,Button2_GPIO_Port,Button2_Pin);
 8000620:	2202      	movs	r2, #2
 8000622:	4920      	ldr	r1, [pc, #128]	; (80006a4 <ButtonMainTask+0xf0>)
 8000624:	481d      	ldr	r0, [pc, #116]	; (800069c <ButtonMainTask+0xe8>)
 8000626:	f7ff ff85 	bl	8000534 <readButton>
		  readButton(&st_button3,Button3_GPIO_Port,Button3_Pin);
 800062a:	2204      	movs	r2, #4
 800062c:	491d      	ldr	r1, [pc, #116]	; (80006a4 <ButtonMainTask+0xf0>)
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <ButtonMainTask+0xec>)
 8000630:	f7ff ff80 	bl	8000534 <readButton>
		  if(pre_BC_Debounce_Set_Val != BC_Debounce_Set_Val)
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <ButtonMainTask+0xf4>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <ButtonMainTask+0xf8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d023      	beq.n	8000688 <ButtonMainTask+0xd4>
		  {
			  en_ButtonCtrlState = DebounceSetState;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <ButtonMainTask+0xe0>)
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
		  }
	    break;
 8000646:	e01f      	b.n	8000688 <ButtonMainTask+0xd4>

	  case DebounceSetState:
		  if(BC_Debounce_Set_Val > BC_DEBOUNCE_MAX)
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <ButtonMainTask+0xf8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000650:	d81c      	bhi.n	800068c <ButtonMainTask+0xd8>
		  {

		  }
		  else if(BC_Debounce_Set_Val < BC_DEBOUNCE_MN)
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <ButtonMainTask+0xf8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d103      	bne.n	8000662 <ButtonMainTask+0xae>
		  {
			  en_ButtonCtrlState = FaultState;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <ButtonMainTask+0xe0>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
			  pre_BC_Debounce_Set_Val = BC_Debounce_Set_Val;
			  SetDebounce(BC_Debounce_Set_Val);
			  en_ButtonCtrlState = RoutineState;
		  }

		break;
 8000660:	e014      	b.n	800068c <ButtonMainTask+0xd8>
			  pre_BC_Debounce_Set_Val = BC_Debounce_Set_Val;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <ButtonMainTask+0xf8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <ButtonMainTask+0xf4>)
 8000668:	6013      	str	r3, [r2, #0]
			  SetDebounce(BC_Debounce_Set_Val);
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <ButtonMainTask+0xf8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff88 	bl	8000584 <SetDebounce>
			  en_ButtonCtrlState = RoutineState;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <ButtonMainTask+0xe0>)
 8000676:	2203      	movs	r2, #3
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e007      	b.n	800068c <ButtonMainTask+0xd8>
	  case FaultState:
		/*do fault action here */
		break;

	  default:
		  en_ButtonCtrlState =FaultState;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <ButtonMainTask+0xe0>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
	}

}
 8000682:	e004      	b.n	800068e <ButtonMainTask+0xda>
		break;
 8000684:	bf00      	nop
 8000686:	e002      	b.n	800068e <ButtonMainTask+0xda>
	    break;
 8000688:	bf00      	nop
 800068a:	e000      	b.n	800068e <ButtonMainTask+0xda>
		break;
 800068c:	bf00      	nop
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000054 	.word	0x20000054
 8000698:	20000008 	.word	0x20000008
 800069c:	20000014 	.word	0x20000014
 80006a0:	20000020 	.word	0x20000020
 80006a4:	40020000 	.word	0x40020000
 80006a8:	20000004 	.word	0x20000004
 80006ac:	20000000 	.word	0x20000000

080006b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_GPIO_Init+0x8c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_GPIO_Init+0x8c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_GPIO_Init+0x8c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_GPIO_Init+0x8c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <MX_GPIO_Init+0x8c>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_GPIO_Init+0x8c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	4811      	ldr	r0, [pc, #68]	; (8000740 <MX_GPIO_Init+0x90>)
 80006fc:	f000 fc4c 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000700:	2307      	movs	r3, #7
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0x94>)
 8000714:	f000 fac0 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000718:	2340      	movs	r3, #64	; 0x40
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x90>)
 8000730:	f000 fab2 	bl	8000c98 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020400 	.word	0x40020400
 8000744:	40020000 	.word	0x40020000

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 f951 	bl	80009f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f822 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f7ff ffac 	bl	80006b0 <MX_GPIO_Init>
  MX_TIM10_Init();
 8000758:	f000 f8ce 	bl	80008f8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  ButtonInitTask();
 800075c:	f7ff feb8 	bl	80004d0 <ButtonInitTask>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if((__HAL_TIM_GetCounter(&htim10) %1) ==0)
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <main+0x48>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  {
		  ButtonMainTask();
 8000766:	f7ff ff25 	bl	80005b4 <ButtonMainTask>
	  }
	  if((__HAL_TIM_GetCounter(&htim10) %1000) ==0)
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <main+0x48>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <main+0x4c>)
 8000772:	fba3 1302 	umull	r1, r3, r3, r2
 8000776:	099b      	lsrs	r3, r3, #6
 8000778:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800077c:	fb01 f303 	mul.w	r3, r1, r3
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1ec      	bne.n	8000760 <main+0x18>
	  {

		 __HAL_TIM_SetCounter(&htim10,0);
 8000786:	4b02      	ldr	r3, [pc, #8]	; (8000790 <main+0x48>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
	  if((__HAL_TIM_GetCounter(&htim10) %1) ==0)
 800078e:	e7e7      	b.n	8000760 <main+0x18>
 8000790:	20000058 	.word	0x20000058
 8000794:	10624dd3 	.word	0x10624dd3

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b092      	sub	sp, #72	; 0x48
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fb9c 	bl	8001ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <SystemClock_Config+0x98>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80007c2:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <SystemClock_Config+0x98>)
 80007c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ca:	2302      	movs	r3, #2
 80007cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d2:	2310      	movs	r3, #16
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007da:	2300      	movs	r3, #0
 80007dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80007de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80007e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fbea 	bl	8000fc8 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007fa:	f000 f81b 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f000 ff06 	bl	8001628 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000822:	f000 f807 	bl	8000834 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3748      	adds	r7, #72	; 0x48
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40007000 	.word	0x40007000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_MspInit+0x58>)
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <HAL_MspInit+0x58>)
 800084c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000850:	6253      	str	r3, [r2, #36]	; 0x24
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_MspInit+0x58>)
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_MspInit+0x58>)
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <HAL_MspInit+0x58>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6213      	str	r3, [r2, #32]
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_MspInit+0x58>)
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x58>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_MspInit+0x58>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6253      	str	r3, [r2, #36]	; 0x24
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_MspInit+0x58>)
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40023800 	.word	0x40023800

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 f8d9 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}

080008ea <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
	...

080008f8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_TIM10_Init+0x6c>)
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <MX_TIM10_Init+0x70>)
 800090e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_TIM10_Init+0x6c>)
 8000912:	2201      	movs	r2, #1
 8000914:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_TIM10_Init+0x6c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 32000;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_TIM10_Init+0x6c>)
 800091e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000922:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_TIM10_Init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_TIM10_Init+0x6c>)
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_TIM10_Init+0x6c>)
 8000932:	f001 f8cb 	bl	8001acc <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 800093c:	f7ff ff7a 	bl	8000834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_TIM10_Init+0x6c>)
 800094c:	f001 f8fd 	bl	8001b4a <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 8000956:	f7ff ff6d 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000058 	.word	0x20000058
 8000968:	40010c00 	.word	0x40010c00

0800096c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <HAL_TIM_Base_MspInit+0x34>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d10b      	bne.n	8000996 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_TIM_Base_MspInit+0x38>)
 8000980:	6a1b      	ldr	r3, [r3, #32]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_TIM_Base_MspInit+0x38>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6213      	str	r3, [r2, #32]
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_TIM_Base_MspInit+0x38>)
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	40023800 	.word	0x40023800

080009a8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a8:	f7ff ff9f 	bl	80008ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ae:	490c      	ldr	r1, [pc, #48]	; (80009e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b0:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c4:	4c09      	ldr	r4, [pc, #36]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f001 fa8f 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff feb7 	bl	8000748 <main>
  bx lr
 80009da:	4770      	bx	lr
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80009e4:	08001f80 	.word	0x08001f80
  ldr r2, =_sbss
 80009e8:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80009ec:	2000009c 	.word	0x2000009c

080009f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_IRQHandler>

080009f2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f917 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 f80e 	bl	8000a24 <HAL_InitTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e001      	b.n	8000a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a14:	f7ff ff14 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_InitTick+0x68>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d022      	beq.n	8000a7e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_InitTick+0x6c>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_InitTick+0x68>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f916 	bl	8000c7e <HAL_SYSTICK_Config>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10f      	bne.n	8000a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d809      	bhi.n	8000a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295
 8000a66:	f000 f8ee 	bl	8000c46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_InitTick+0x70>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e004      	b.n	8000a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e001      	b.n	8000a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000034 	.word	0x20000034
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	20000030 	.word	0x20000030

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000aa8:	6013      	str	r3, [r2, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000098 	.word	0x20000098
 8000ab8:	20000034 	.word	0x20000034

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000098 	.word	0x20000098

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff90 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff49 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff5e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff90 	bl	8000b88 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5f 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffb0 	bl	8000bec <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cae:	e154      	b.n	8000f5a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8146 	beq.w	8000f54 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d005      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 0201 	and.w	r2, r3, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d123      	bne.n	8000dd2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	6939      	ldr	r1, [r7, #16]
 8000dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0203 	and.w	r2, r3, #3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80a0 	beq.w	8000f54 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	4a57      	ldr	r2, [pc, #348]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6213      	str	r3, [r2, #32]
 8000e20:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e2c:	4a53      	ldr	r2, [pc, #332]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a4b      	ldr	r2, [pc, #300]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d019      	beq.n	8000e8c <HAL_GPIO_Init+0x1f4>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a4a      	ldr	r2, [pc, #296]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x1f0>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <HAL_GPIO_Init+0x2f0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00d      	beq.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x1e8>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <HAL_GPIO_Init+0x2f8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d101      	bne.n	8000e7c <HAL_GPIO_Init+0x1e4>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e008      	b.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e80:	2303      	movs	r3, #3
 8000e82:	e004      	b.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e9e:	4937      	ldr	r1, [pc, #220]	; (8000f7c <HAL_GPIO_Init+0x2e4>)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed0:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f47f aea3 	bne.w	8000cb0 <HAL_GPIO_Init+0x18>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000fb4:	e003      	b.n	8000fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	041a      	lsls	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	619a      	str	r2, [r3, #24]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e31d      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fda:	4b94      	ldr	r3, [pc, #592]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fe4:	4b91      	ldr	r3, [pc, #580]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d07b      	beq.n	80010f2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d006      	beq.n	800100e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b0c      	cmp	r3, #12
 8001004:	d10f      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d10b      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4b87      	ldr	r3, [pc, #540]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d06a      	beq.n	80010f0 <HAL_RCC_OscConfig+0x128>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d166      	bne.n	80010f0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e2f7      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d106      	bne.n	800103c <HAL_RCC_OscConfig+0x74>
 800102e:	4b7f      	ldr	r3, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7e      	ldr	r2, [pc, #504]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e02d      	b.n	8001098 <HAL_RCC_OscConfig+0xd0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10c      	bne.n	800105e <HAL_RCC_OscConfig+0x96>
 8001044:	4b79      	ldr	r3, [pc, #484]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a78      	ldr	r2, [pc, #480]	; (800122c <HAL_RCC_OscConfig+0x264>)
 800104a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b76      	ldr	r3, [pc, #472]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a75      	ldr	r2, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e01c      	b.n	8001098 <HAL_RCC_OscConfig+0xd0>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b05      	cmp	r3, #5
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0xb8>
 8001066:	4b71      	ldr	r3, [pc, #452]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a70      	ldr	r2, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x264>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b6e      	ldr	r3, [pc, #440]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a6d      	ldr	r2, [pc, #436]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0xd0>
 8001080:	4b6a      	ldr	r3, [pc, #424]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a69      	ldr	r2, [pc, #420]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b67      	ldr	r3, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x264>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a66      	ldr	r2, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fd0c 	bl	8000abc <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fd08 	bl	8000abc <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e2ad      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ba:	4b5c      	ldr	r3, [pc, #368]	; (800122c <HAL_RCC_OscConfig+0x264>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0xe0>
 80010c6:	e014      	b.n	80010f2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fcf8 	bl	8000abc <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fcf4 	bl	8000abc <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e299      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <HAL_RCC_OscConfig+0x264>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x108>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d05a      	beq.n	80011b4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b04      	cmp	r3, #4
 8001102:	d005      	beq.n	8001110 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2b0c      	cmp	r3, #12
 8001108:	d119      	bne.n	800113e <HAL_RCC_OscConfig+0x176>
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d116      	bne.n	800113e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001110:	4b46      	ldr	r3, [pc, #280]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_OscConfig+0x160>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d001      	beq.n	8001128 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e276      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <HAL_RCC_OscConfig+0x264>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	493d      	ldr	r1, [pc, #244]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113c:	e03a      	b.n	80011b4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d020      	beq.n	8001188 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <HAL_RCC_OscConfig+0x268>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fcb6 	bl	8000abc <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fcb2 	bl	8000abc <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e257      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	492a      	ldr	r1, [pc, #168]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
 8001186:	e015      	b.n	80011b4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <HAL_RCC_OscConfig+0x268>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fc95 	bl	8000abc <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fc91 	bl	8000abc <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e236      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_RCC_OscConfig+0x264>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80b8 	beq.w	8001332 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d170      	bne.n	80012aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_RCC_OscConfig+0x264>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x218>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e21a      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_RCC_OscConfig+0x264>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d921      	bls.n	8001234 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fc09 	bl	8001a0c <RCC_SetFlashLatencyFromMSIRange>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e208      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4906      	ldr	r1, [pc, #24]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	061b      	lsls	r3, r3, #24
 8001224:	4901      	ldr	r1, [pc, #4]	; (800122c <HAL_RCC_OscConfig+0x264>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
 800122a:	e020      	b.n	800126e <HAL_RCC_OscConfig+0x2a6>
 800122c:	40023800 	.word	0x40023800
 8001230:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001234:	4b99      	ldr	r3, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4996      	ldr	r1, [pc, #600]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001246:	4b95      	ldr	r3, [pc, #596]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	061b      	lsls	r3, r3, #24
 8001254:	4991      	ldr	r1, [pc, #580]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fbd4 	bl	8001a0c <RCC_SetFlashLatencyFromMSIRange>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e1d3      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	0b5b      	lsrs	r3, r3, #13
 8001274:	3301      	adds	r3, #1
 8001276:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800127e:	4a87      	ldr	r2, [pc, #540]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001280:	6892      	ldr	r2, [r2, #8]
 8001282:	0912      	lsrs	r2, r2, #4
 8001284:	f002 020f 	and.w	r2, r2, #15
 8001288:	4985      	ldr	r1, [pc, #532]	; (80014a0 <HAL_RCC_OscConfig+0x4d8>)
 800128a:	5c8a      	ldrb	r2, [r1, r2]
 800128c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800128e:	4a85      	ldr	r2, [pc, #532]	; (80014a4 <HAL_RCC_OscConfig+0x4dc>)
 8001290:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001292:	4b85      	ldr	r3, [pc, #532]	; (80014a8 <HAL_RCC_OscConfig+0x4e0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fbc4 	bl	8000a24 <HAL_InitTick>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d045      	beq.n	8001332 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	e1b5      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d029      	beq.n	8001306 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012b2:	4b7e      	ldr	r3, [pc, #504]	; (80014ac <HAL_RCC_OscConfig+0x4e4>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc00 	bl	8000abc <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c0:	f7ff fbfc 	bl	8000abc <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1a1      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012d2:	4b72      	ldr	r3, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012de:	4b6f      	ldr	r3, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	496c      	ldr	r1, [pc, #432]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f0:	4b6a      	ldr	r3, [pc, #424]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	061b      	lsls	r3, r3, #24
 80012fe:	4967      	ldr	r1, [pc, #412]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001306:	4b69      	ldr	r3, [pc, #420]	; (80014ac <HAL_RCC_OscConfig+0x4e4>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fbd6 	bl	8000abc <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001314:	f7ff fbd2 	bl	8000abc <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e177      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001326:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d030      	beq.n	80013a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d016      	beq.n	8001374 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001346:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <HAL_RCC_OscConfig+0x4e8>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff fbb6 	bl	8000abc <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff fbb2 	bl	8000abc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e157      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x38c>
 8001372:	e015      	b.n	80013a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001374:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fb9f 	bl	8000abc <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fb9b 	bl	8000abc <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e140      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001394:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80b5 	beq.w	8001518 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10d      	bne.n	80013da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	4a36      	ldr	r2, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6253      	str	r3, [r2, #36]	; 0x24
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x4ec>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_RCC_OscConfig+0x4ec>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <HAL_RCC_OscConfig+0x4ec>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb63 	bl	8000abc <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fb5f 	bl	8000abc <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e104      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x4ec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x466>
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142a:	6353      	str	r3, [r2, #52]	; 0x34
 800142c:	e02d      	b.n	800148a <HAL_RCC_OscConfig+0x4c2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x488>
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	4a18      	ldr	r2, [pc, #96]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001440:	6353      	str	r3, [r2, #52]	; 0x34
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800144c:	6353      	str	r3, [r2, #52]	; 0x34
 800144e:	e01c      	b.n	800148a <HAL_RCC_OscConfig+0x4c2>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x4aa>
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 800145e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001462:	6353      	str	r3, [r2, #52]	; 0x34
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 800146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146e:	6353      	str	r3, [r2, #52]	; 0x34
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x4c2>
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800147c:	6353      	str	r3, [r2, #52]	; 0x34
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x4d4>)
 8001484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001488:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d024      	beq.n	80014dc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb13 	bl	8000abc <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001498:	e019      	b.n	80014ce <HAL_RCC_OscConfig+0x506>
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	08001f60 	.word	0x08001f60
 80014a4:	2000002c 	.word	0x2000002c
 80014a8:	20000030 	.word	0x20000030
 80014ac:	42470020 	.word	0x42470020
 80014b0:	42470680 	.word	0x42470680
 80014b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fb00 	bl	8000abc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0a3      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ce:	4b54      	ldr	r3, [pc, #336]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 80014d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0ee      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4f0>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff faee 	bl	8000abc <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff faea 	bl	8000abc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e08d      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ee      	bne.n	80014e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001506:	7ffb      	ldrb	r3, [r7, #31]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	4a43      	ldr	r2, [pc, #268]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 8001512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001516:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	2b00      	cmp	r3, #0
 800151e:	d079      	beq.n	8001614 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b0c      	cmp	r3, #12
 8001524:	d056      	beq.n	80015d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	2b02      	cmp	r3, #2
 800152c:	d13b      	bne.n	80015a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_RCC_OscConfig+0x65c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fac2 	bl	8000abc <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fabe 	bl	8000abc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e063      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	4319      	orrs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	430b      	orrs	r3, r1
 8001572:	492b      	ldr	r1, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_RCC_OscConfig+0x65c>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fa9d 	bl	8000abc <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fa99 	bl	8000abc <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e03e      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x5be>
 80015a4:	e036      	b.n	8001614 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x65c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fa86 	bl	8000abc <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fa82 	bl	8000abc <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e027      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5ec>
 80015d2:	e01f      	b.n	8001614 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e01a      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_RCC_OscConfig+0x658>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	42470060 	.word	0x42470060

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e11a      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b8f      	ldr	r3, [pc, #572]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d919      	bls.n	800167e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_ClockConfig+0x34>
 8001650:	4b8a      	ldr	r3, [pc, #552]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a89      	ldr	r2, [pc, #548]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b87      	ldr	r3, [pc, #540]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 0201 	bic.w	r2, r3, #1
 8001664:	4985      	ldr	r1, [pc, #532]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166c:	4b83      	ldr	r3, [pc, #524]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0f9      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168a:	4b7d      	ldr	r3, [pc, #500]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	497a      	ldr	r1, [pc, #488]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 808e 	beq.w	80017c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016b2:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d121      	bne.n	8001702 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0d7      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d115      	bne.n	8001702 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0cb      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e2:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0bf      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0b7      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4b5f      	ldr	r3, [pc, #380]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 0203 	bic.w	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	495c      	ldr	r1, [pc, #368]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001714:	f7ff f9d2 	bl	8000abc <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d112      	bne.n	8001748 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001722:	e00a      	b.n	800173a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff f9ca 	bl	8000abc <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e09b      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800173a:	4b51      	ldr	r3, [pc, #324]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d1ee      	bne.n	8001724 <HAL_RCC_ClockConfig+0xfc>
 8001746:	e03e      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d112      	bne.n	8001776 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001752:	f7ff f9b3 	bl	8000abc <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e084      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	4b45      	ldr	r3, [pc, #276]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d1ee      	bne.n	8001752 <HAL_RCC_ClockConfig+0x12a>
 8001774:	e027      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d11d      	bne.n	80017ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001780:	f7ff f99c 	bl	8000abc <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e06d      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d1ee      	bne.n	8001780 <HAL_RCC_ClockConfig+0x158>
 80017a2:	e010      	b.n	80017c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a4:	f7ff f98a 	bl	8000abc <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e05b      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ee      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d219      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d105      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x1be>
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0201 	bic.w	r2, r3, #1
 80017ee:	4923      	ldr	r1, [pc, #140]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_ClockConfig+0x254>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e034      	b.n	8001872 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4917      	ldr	r1, [pc, #92]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490f      	ldr	r1, [pc, #60]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f823 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_RCC_ClockConfig+0x258>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490b      	ldr	r1, [pc, #44]	; (8001884 <HAL_RCC_ClockConfig+0x25c>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x260>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x264>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f8dc 	bl	8000a24 <HAL_InitTick>
 800186c:	4603      	mov	r3, r0
 800186e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001870:	7afb      	ldrb	r3, [r7, #11]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08001f60 	.word	0x08001f60
 8001888:	2000002c 	.word	0x2000002c
 800188c:	20000030 	.word	0x20000030

08001890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b08e      	sub	sp, #56	; 0x38
 8001896:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001898:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_RCC_GetSysClockFreq+0x16c>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d00d      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x34>
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	f200 8092 	bhi.w	80019d2 <HAL_RCC_GetSysClockFreq+0x142>
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x28>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x2e>
 80018b6:	e08c      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x170>)
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018bc:	e097      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x174>)
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c2:	e094      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	0c9b      	lsrs	r3, r3, #18
 80018c8:	f003 020f 	and.w	r2, r3, #15
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x178>)
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	0d9b      	lsrs	r3, r3, #22
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d021      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	2200      	movs	r2, #0
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	61fa      	str	r2, [r7, #28]
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x174>)
 80018f4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f8:	464a      	mov	r2, r9
 80018fa:	fb03 f202 	mul.w	r2, r3, r2
 80018fe:	2300      	movs	r3, #0
 8001900:	4644      	mov	r4, r8
 8001902:	fb04 f303 	mul.w	r3, r4, r3
 8001906:	4413      	add	r3, r2
 8001908:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x174>)
 800190a:	4644      	mov	r4, r8
 800190c:	fba4 0102 	umull	r0, r1, r4, r2
 8001910:	440b      	add	r3, r1
 8001912:	4619      	mov	r1, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	2200      	movs	r2, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	617a      	str	r2, [r7, #20]
 800191c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001920:	f7fe fc2c 	bl	800017c <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
 800192c:	e04e      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	2200      	movs	r2, #0
 8001932:	469a      	mov	sl, r3
 8001934:	4693      	mov	fp, r2
 8001936:	4652      	mov	r2, sl
 8001938:	465b      	mov	r3, fp
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001948:	0150      	lsls	r0, r2, #5
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	ebb2 080a 	subs.w	r8, r2, sl
 8001952:	eb63 090b 	sbc.w	r9, r3, fp
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001962:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001966:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800196a:	ebb2 0408 	subs.w	r4, r2, r8
 800196e:	eb63 0509 	sbc.w	r5, r3, r9
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	00eb      	lsls	r3, r5, #3
 800197c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001980:	00e2      	lsls	r2, r4, #3
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
 8001986:	eb14 030a 	adds.w	r3, r4, sl
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	eb45 030b 	adc.w	r3, r5, fp
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199e:	4629      	mov	r1, r5
 80019a0:	028b      	lsls	r3, r1, #10
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	4604      	mov	r4, r0
 80019a8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80019ac:	4601      	mov	r1, r0
 80019ae:	028a      	lsls	r2, r1, #10
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	2200      	movs	r2, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	60fa      	str	r2, [r7, #12]
 80019bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019c0:	f7fe fbdc 	bl	800017c <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4613      	mov	r3, r2
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d0:	e00d      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	3301      	adds	r3, #1
 80019e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3738      	adds	r7, #56	; 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	00f42400 	.word	0x00f42400
 8001a04:	016e3600 	.word	0x016e3600
 8001a08:	08001f54 	.word	0x08001f54

08001a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d12c      	bne.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e016      	b.n	8001a6a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6253      	str	r3, [r2, #36]	; 0x24
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a5c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a70:	d105      	bne.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a78:	d101      	bne.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 0201 	bic.w	r2, r3, #1
 8001a98:	490b      	ldr	r1, [pc, #44]	; (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	40023c00 	.word	0x40023c00

08001acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e031      	b.n	8001b42 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe ff3a 	bl	800096c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f000 f8e4 	bl	8001cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_ConfigClockSource+0x1c>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e0b4      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x186>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2202      	movs	r2, #2
 8001b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9e:	d03e      	beq.n	8001c1e <HAL_TIM_ConfigClockSource+0xd4>
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba4:	f200 8087 	bhi.w	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bac:	f000 8086 	beq.w	8001cbc <HAL_TIM_ConfigClockSource+0x172>
 8001bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb4:	d87f      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb6:	2b70      	cmp	r3, #112	; 0x70
 8001bb8:	d01a      	beq.n	8001bf0 <HAL_TIM_ConfigClockSource+0xa6>
 8001bba:	2b70      	cmp	r3, #112	; 0x70
 8001bbc:	d87b      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bbe:	2b60      	cmp	r3, #96	; 0x60
 8001bc0:	d050      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x11a>
 8001bc2:	2b60      	cmp	r3, #96	; 0x60
 8001bc4:	d877      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bc6:	2b50      	cmp	r3, #80	; 0x50
 8001bc8:	d03c      	beq.n	8001c44 <HAL_TIM_ConfigClockSource+0xfa>
 8001bca:	2b50      	cmp	r3, #80	; 0x50
 8001bcc:	d873      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d058      	beq.n	8001c84 <HAL_TIM_ConfigClockSource+0x13a>
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	d86f      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bd6:	2b30      	cmp	r3, #48	; 0x30
 8001bd8:	d064      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bda:	2b30      	cmp	r3, #48	; 0x30
 8001bdc:	d86b      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d060      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d867      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d05c      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d05a      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bee:	e062      	b.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c00:	f000 f951 	bl	8001ea6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	609a      	str	r2, [r3, #8]
      break;
 8001c1c:	e04f      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c2e:	f000 f93a 	bl	8001ea6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c40:	609a      	str	r2, [r3, #8]
      break;
 8001c42:	e03c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c50:	461a      	mov	r2, r3
 8001c52:	f000 f8b1 	bl	8001db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2150      	movs	r1, #80	; 0x50
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f908 	bl	8001e72 <TIM_ITRx_SetConfig>
      break;
 8001c62:	e02c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c70:	461a      	mov	r2, r3
 8001c72:	f000 f8cf 	bl	8001e14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2160      	movs	r1, #96	; 0x60
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f8f8 	bl	8001e72 <TIM_ITRx_SetConfig>
      break;
 8001c82:	e01c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c90:	461a      	mov	r2, r3
 8001c92:	f000 f891 	bl	8001db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f8e8 	bl	8001e72 <TIM_ITRx_SetConfig>
      break;
 8001ca2:	e00c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 f8df 	bl	8001e72 <TIM_ITRx_SetConfig>
      break;
 8001cb4:	e003      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cba:	e000      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001cbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cee:	d00f      	beq.n	8001d10 <TIM_Base_SetConfig+0x38>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <TIM_Base_SetConfig+0xc8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00b      	beq.n	8001d10 <TIM_Base_SetConfig+0x38>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <TIM_Base_SetConfig+0xcc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d007      	beq.n	8001d10 <TIM_Base_SetConfig+0x38>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <TIM_Base_SetConfig+0xd0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d003      	beq.n	8001d10 <TIM_Base_SetConfig+0x38>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a28      	ldr	r2, [pc, #160]	; (8001dac <TIM_Base_SetConfig+0xd4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d108      	bne.n	8001d22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d017      	beq.n	8001d5a <TIM_Base_SetConfig+0x82>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <TIM_Base_SetConfig+0xc8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <TIM_Base_SetConfig+0x82>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <TIM_Base_SetConfig+0xcc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00f      	beq.n	8001d5a <TIM_Base_SetConfig+0x82>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <TIM_Base_SetConfig+0xd0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00b      	beq.n	8001d5a <TIM_Base_SetConfig+0x82>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <TIM_Base_SetConfig+0xd4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <TIM_Base_SetConfig+0x82>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <TIM_Base_SetConfig+0xd8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d003      	beq.n	8001d5a <TIM_Base_SetConfig+0x82>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <TIM_Base_SetConfig+0xdc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d108      	bne.n	8001d6c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	615a      	str	r2, [r3, #20]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40000800 	.word	0x40000800
 8001da8:	40000c00 	.word	0x40000c00
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000

08001db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	f023 0201 	bic.w	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f023 030a 	bic.w	r3, r3, #10
 8001df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	621a      	str	r2, [r3, #32]
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	f023 0210 	bic.w	r2, r3, #16
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	031b      	lsls	r3, r3, #12
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	621a      	str	r2, [r3, #32]
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f043 0307 	orr.w	r3, r3, #7
 8001e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	609a      	str	r2, [r3, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	021a      	lsls	r2, r3, #8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	609a      	str	r2, [r3, #8]
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <memset>:
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4402      	add	r2, r0
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d100      	bne.n	8001eee <memset+0xa>
 8001eec:	4770      	bx	lr
 8001eee:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef2:	e7f9      	b.n	8001ee8 <memset+0x4>

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	2600      	movs	r6, #0
 8001ef8:	4d0c      	ldr	r5, [pc, #48]	; (8001f2c <__libc_init_array+0x38>)
 8001efa:	4c0d      	ldr	r4, [pc, #52]	; (8001f30 <__libc_init_array+0x3c>)
 8001efc:	1b64      	subs	r4, r4, r5
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	f000 f81a 	bl	8001f3c <_init>
 8001f08:	2600      	movs	r6, #0
 8001f0a:	4d0a      	ldr	r5, [pc, #40]	; (8001f34 <__libc_init_array+0x40>)
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <__libc_init_array+0x44>)
 8001f0e:	1b64      	subs	r4, r4, r5
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	42a6      	cmp	r6, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1c:	4798      	blx	r3
 8001f1e:	3601      	adds	r6, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f26:	4798      	blx	r3
 8001f28:	3601      	adds	r6, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	08001f78 	.word	0x08001f78
 8001f30:	08001f78 	.word	0x08001f78
 8001f34:	08001f78 	.word	0x08001f78
 8001f38:	08001f7c 	.word	0x08001f7c

08001f3c <_init>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	bf00      	nop
 8001f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f42:	bc08      	pop	{r3}
 8001f44:	469e      	mov	lr, r3
 8001f46:	4770      	bx	lr

08001f48 <_fini>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr
